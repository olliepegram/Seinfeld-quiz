{"ast":null,"code":"var _jsxFileName = \"/Users/ollie/Desktop/apps/react-redux/seinfeld-quiz/src/components/Quotes.js\";\nimport React, { Component } from 'react';\nimport './Quotes.css';\n\nclass Quotes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.listRef = React.createRef();\n\n    this.randColor = array => {\n      var copy = array.slice(0);\n      return function () {\n        if (copy.length < 1) {\n          copy = array.slice(0);\n        }\n\n        var index = Math.floor(Math.random() * copy.length);\n        var item = copy[index];\n        copy.splice(index, 1);\n        return item;\n      };\n    };\n  }\n\n  render() {\n    const colors = this.randColor(['#EEAF00', '#01A7B7', '#DE4B43', '#FCA080', '#FF7E57', '#3C3642', '#85496F', '#5D9B84']);\n\n    if (this.props.gameWon) {\n      return React.createElement(\"div\", {\n        className: \"QuoteContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"AllQuotes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.props.quotes.map(quote => React.createElement(\"li\", {\n        key: quote.id,\n        className: \"SingleQuote\",\n        style: {\n          backgroundColor: this.listRef.current.style.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"quote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.props.author.quote), React.createElement(\"div\", {\n        className: \"quote-about\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"quote-season\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Season: \", this.props.author.season), React.createElement(\"span\", {\n        className: \"quote-episode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Episode: \", this.props.author.episode))))));\n    } else if (this.props.gameWon === false) {\n      return React.createElement(\"div\", {\n        className: \"QuoteContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"AllQuotes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.props.quotes.map(quote => React.createElement(\"li\", {\n        key: quote.id,\n        className: \"SingleQuote\",\n        style: {\n          backgroundColor: colors()\n        },\n        onClick: () => this.props.handleChoice(quote.id),\n        ref: this.listRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"quote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, quote.quote), React.createElement(\"div\", {\n        className: \"quote-about\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"quote-season\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Season: \", quote.season), React.createElement(\"span\", {\n        className: \"quote-episode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Episode: \", quote.episode))))));\n    }\n  }\n\n}\n\nexport default Quotes;","map":{"version":3,"sources":["/Users/ollie/Desktop/apps/react-redux/seinfeld-quiz/src/components/Quotes.js"],"names":["React","Component","Quotes","listRef","createRef","randColor","array","copy","slice","length","index","Math","floor","random","item","splice","render","colors","props","gameWon","quotes","map","quote","id","backgroundColor","current","style","author","season","episode","handleChoice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Quotes.css';\n\nclass Quotes extends Component {\n    listRef = React.createRef();\n    randColor = array => {\n        var copy = array.slice(0);\n        return function() {\n            if (copy.length < 1) {\n                copy = array.slice(0);\n            }\n            var index = Math.floor(Math.random() * copy.length);\n            var item = copy[index];\n            copy.splice(index, 1);\n            return item;\n        };\n    };\n\n    render() {\n        const colors = this.randColor([\n            '#EEAF00',\n            '#01A7B7',\n            '#DE4B43',\n            '#FCA080',\n            '#FF7E57',\n            '#3C3642',\n            '#85496F',\n            '#5D9B84'\n        ]);\n        if (this.props.gameWon) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className='SingleQuote'\n                                style={{\n                                    backgroundColor: this.listRef.current.style\n                                        .backgroundColor\n                                }}\n                            >\n                                <h3 className='quote'>\n                                    {this.props.author.quote}\n                                </h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {this.props.author.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {this.props.author.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        } else if (this.props.gameWon === false) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className='SingleQuote'\n                                style={{\n                                    backgroundColor: colors()\n                                }}\n                                onClick={() =>\n                                    this.props.handleChoice(quote.id)\n                                }\n                                ref={this.listRef}\n                            >\n                                <h3 className='quote'>{quote.quote}</h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {quote.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {quote.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Quotes;\n"]},"metadata":{},"sourceType":"module"}