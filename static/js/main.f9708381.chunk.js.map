{"version":3,"sources":["components/Buttons.js","components/Header.js","components/Quotes.js","components/Author.js","components/Spinner.js","components/App.js","serviceWorker.js","index.js"],"names":["Buttons","className","onClick","this","props","handleNewQuotesClick","handleButtonModes","Component","Header","title","subtitle","gameWon","author","style","backgroundColor","color","Quotes","state","activeItem","listRef","React","createRef","index","setState","quotes","map","quote","key","id","season","episode","display","handleChoice","handleClickItem","ref","Author","borderColor","Spinner","class","width","height","viewBox","xmlns","fill","stroke-width","stroke-linecap","cx","cy","r","defaultProps","message","App","pickedAuthor","mode","loading","getQuotes","find","renderQuotes","Fragment","colors","length","array","copy","slice","Math","floor","random","item","splice","randColor","filteredQuotes","numQuotesToGetHard","axios","get","res","bulkQuote","data","push","uuid","v4","filter","obj","pos","arr","mapObj","indexOf","authorIndex","sort","href","target","rel","numQuotesToGetEasy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9708381.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Buttons.css\";\n\nexport class Buttons extends Component {\n  render() {\n    return (\n      <div className='Buttons'>\n        <button className='newQuotes' onClick={this.props.handleNewQuotesClick}>\n          <span className='quotesSpan hvr-float'>New Quotes</span>\n        </button>\n        <button\n          onClick={() => this.props.handleButtonModes(\"easy\")}\n          className='easyButton'\n        >\n          <span className='easySpan hvr-float'>Easy</span>\n        </button>\n        <button\n          onClick={() => this.props.handleButtonModes(\"hard\")}\n          className='hardButton'\n        >\n          <span className='hardSpan hvr-float'>Giddy Up</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Buttons;\n","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport Buttons from \"./Buttons\";\n\nclass Header extends Component {\n  render() {\n    const { title, subtitle, gameWon, author } = this.props;\n    return (\n      <div\n        className='Header'\n        style={{ backgroundColor: gameWon ? author.color : \"#23a4db\" }}\n      >\n        <div className='HeaderInner'>\n          <h1 className='title'>{title}</h1>\n          <h2 className='subtitle'>{subtitle}</h2>\n        </div>\n\n        <Buttons\n          handleButtonModes={this.props.handleButtonModes}\n          handleNewQuotesClick={this.props.handleNewQuotesClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Quotes.css';\n\nclass Quotes extends Component {\n    state = { activeItem: '' };\n    listRef = React.createRef();\n\n    handleClickItem(index) {\n        this.setState({ activeItem: index });\n    }\n\n    render() {\n        if (this.props.gameWon) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className='SingleQuote hvr-float'\n                                style={{\n                                    backgroundColor: this.props.author.color\n                                }}\n                            >\n                                <h3 className='quote'>\n                                    {this.props.author.quote}\n                                </h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {this.props.author.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {this.props.author.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        } else if (this.props.gameWon === false) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className={`SingleQuote hvr-float`}\n                                style={{\n                                    backgroundColor: quote.color,\n                                    display:\n                                        this.state.activeItem === quote.id\n                                            ? 'none'\n                                            : 'absolute'\n                                }}\n                                onClick={() => {\n                                    this.props.handleChoice(quote.id);\n                                    this.handleClickItem(quote.id);\n                                }}\n                                ref={this.listRef}\n                            >\n                                <h3 className='quote'>{quote.quote}</h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {quote.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {quote.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Quotes;\n","import React, { Component } from 'react';\nimport './Author.css';\n\nclass Author extends Component {\n    render() {\n        const { author, gameWon } = this.props;\n        return (\n            <div className='Author-wrap'>\n                <p\n                    className='PickedAuthor'\n                    style={{ borderColor: gameWon ? author.color : '#fed522' }}\n                >\n                    {author.author ? `${author.author} said what!?` : ''}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Author;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = props => {\n  return (\n    <div className='SpinnerContainer'>\n      <svg\n        class='spinner'\n        width='65px'\n        height='65px'\n        viewBox='0 0 66 66'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <circle\n          class='circle'\n          fill='none'\n          stroke-width='6'\n          stroke-linecap='round'\n          cx='33'\n          cy='33'\n          r='30'\n        ></circle>\n      </svg>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: \"Loading...\"\n};\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Quotes from \"./Quotes\";\nimport Author from \"./Author\";\nimport Spinner from \"./Spinner\";\nimport axios from \"axios\";\nimport uuid from \"uuid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  static defaultProps = {\n    numQuotesToGetHard: 6,\n    numQuotesToGetEasy: 3,\n    colors: [\n      \"#EEAF00\",\n      \"#01A7B7\",\n      \"#DE4B43\",\n      \"#FCA080\",\n      \"#FF7E57\",\n      \"#3C3642\",\n      \"#85496F\",\n      \"#5D9B84\"\n    ]\n  };\n  state = {\n    quotes: [],\n    pickedAuthor: {},\n    gameWon: false,\n    mode: \"hard\",\n    loading: false\n  };\n\n  async componentDidMount() {\n    if (this.state.quotes.length === 0) this.getQuotes();\n  }\n  async getQuotes() {\n    const randColor = array => {\n      var copy = array.slice(0);\n      return function() {\n        if (copy.length < 1) {\n          copy = array.slice(0);\n        }\n        var index = Math.floor(Math.random() * copy.length);\n        var item = copy[index];\n        copy.splice(index, 1);\n        return item;\n      };\n    };\n    const color = randColor(this.props.colors);\n    let quotes = [];\n    let filteredQuotes = [];\n    while (filteredQuotes.length < this.props.numQuotesToGetHard) {\n      let res = await axios.get(\"https://seinfeld-quotes.herokuapp.com/random\");\n      let bulkQuote = res.data;\n      quotes.push({\n        id: uuid.v4(),\n        quote: bulkQuote.quote,\n        author: bulkQuote.author,\n        episode: bulkQuote.episode,\n        season: bulkQuote.season,\n        color: color()\n      });\n\n      filteredQuotes = quotes.filter((obj, pos, arr) => {\n        return (\n          arr.map(mapObj => mapObj[\"author\"]).indexOf(obj[\"author\"]) === pos\n        );\n      });\n      this.setState({ loading: true });\n    }\n\n    this.setState({\n      pickedAuthor: filteredQuotes[0],\n      gameWon: false\n    });\n    let authorIndex = filteredQuotes.indexOf(this.state.pickedAuthor);\n    if (this.state.mode === \"hard\") {\n      this.setState({\n        quotes: filteredQuotes.sort(() => Math.random() - 0.5)\n      });\n    } else if (this.state.mode === \"easy\") {\n      this.setState({\n        quotes: filteredQuotes\n          .splice(authorIndex, 2)\n          .sort(() => Math.random() - 0.5)\n      });\n    }\n    this.setState({ loading: false });\n  }\n\n  handleButtonModes = mode => {\n    if (mode === \"easy\") {\n      this.setState({ mode: \"easy\" });\n    } else if (mode === \"hard\") {\n      this.setState({ mode: \"hard\" });\n    }\n\n    if (this.state.mode === \"easy\" || this.state.mode === \"hard\") {\n      this.setState(this.getQuotes());\n    }\n  };\n\n  handleChoice = id => {\n    const currentGuess = this.state.quotes.find(quote => {\n      return quote.id === id;\n    });\n    if (currentGuess.quote === this.state.pickedAuthor.quote) {\n      this.setState({ gameWon: true });\n    }\n  };\n\n  handleNewQuotesClick = () => {\n    this.setState(this.getQuotes());\n  };\n\n  renderQuotes = () => {\n    if (this.state.loading === true) {\n      return <Spinner />;\n    } else if (this.state.loading === false) {\n      return (\n        <React.Fragment>\n          <Author\n            author={this.state.pickedAuthor}\n            gameWon={this.state.gameWon}\n          />\n\n          <Quotes\n            quotes={this.state.quotes}\n            author={this.state.pickedAuthor}\n            handleChoice={this.handleChoice}\n            gameWon={this.state.gameWon}\n            color={this.props.colors}\n            mode={this.state.mode}\n          />\n        </React.Fragment>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Header\n          title={\"The Seinfeld Chronicles\"}\n          subtitle={\"a quiz for a show about nothing\"}\n          gameWon={this.state.gameWon}\n          author={this.state.pickedAuthor}\n          handleButtonModes={this.handleButtonModes}\n          handleNewQuotesClick={this.handleNewQuotesClick}\n        />\n        {this.renderQuotes()}\n        <p className='builtBy'>\n          This is gold,{\" \"}\n          <a\n            href='https://twitter.com/olliepegram'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            Ollie!\n          </a>{\" \"}\n          Gold!\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}