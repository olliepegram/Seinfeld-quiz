{"version":3,"sources":["components/Buttons.js","components/Header.js","components/Quotes.js","components/Author.js","components/Spinner.js","components/App.js","serviceWorker.js","index.js"],"names":["Buttons","className","onClick","this","props","handleNewQuotesClick","handleButtonModes","Component","Header","title","subtitle","gameWon","author","style","backgroundColor","color","Quotes","state","activeItem","listRef","React","createRef","index","setState","quotes","map","quote","key","id","season","episode","display","handleChoice","handleClickItem","ref","Author","authorOrWon","Fragment","Spinner","width","height","viewBox","xmlns","fill","strokeWidth","strokeLinecap","cx","cy","r","defaultProps","message","App","pickedAuthor","mode","loading","getQuotes","find","renderQuotes","colors","length","array","copy","slice","Math","floor","random","item","splice","randColor","filteredQuotes","numQuotesToGetHard","axios","get","res","bulkQuote","data","push","uuid","v4","filter","obj","pos","arr","mapObj","indexOf","authorIndex","sort","href","target","rel","numQuotesToGetEasy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65daae1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Buttons.css\";\n\nexport class Buttons extends Component {\n  render() {\n    return (\n      <div className='Buttons'>\n        <button className='newQuotes' onClick={this.props.handleNewQuotesClick}>\n          <span className='quotesSpan hvr-float'>New Quotes</span>\n        </button>\n        <button\n          onClick={() => this.props.handleButtonModes(\"easy\")}\n          className='easyButton'\n        >\n          <span className='easySpan hvr-float'>Easy</span>\n        </button>\n        <button\n          onClick={() => this.props.handleButtonModes(\"hard\")}\n          className='hardButton'\n        >\n          <span className='hardSpan hvr-float'>Giddy Up</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Buttons;\n","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport Buttons from \"./Buttons\";\n\nclass Header extends Component {\n  render() {\n    const { title, subtitle, gameWon, author } = this.props;\n    return (\n      <div\n        className='Header'\n        style={{ backgroundColor: gameWon ? author.color : \"#23a4db\" }}\n      >\n        <div className='HeaderInner'>\n          <h1 className='title'>{title}</h1>\n          <h2 className='subtitle'>{subtitle}</h2>\n        </div>\n\n        <Buttons\n          handleButtonModes={this.props.handleButtonModes}\n          handleNewQuotesClick={this.props.handleNewQuotesClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Quotes.css';\n\nclass Quotes extends Component {\n    state = { activeItem: '' };\n    listRef = React.createRef();\n\n    handleClickItem(index) {\n        this.setState({ activeItem: index });\n    }\n\n    render() {\n        if (this.props.gameWon) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className='SingleQuote hvr-float'\n                                style={{\n                                    backgroundColor: this.props.author.color\n                                }}\n                            >\n                                <h3 className='quote'>\n                                    {this.props.author.quote}\n                                    <span className='quote-win-author'>\n                                        {this.props.author.author}\n                                    </span>\n                                </h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {this.props.author.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {this.props.author.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        } else if (this.props.gameWon === false) {\n            return (\n                <div className='QuoteContainer'>\n                    <ul className='AllQuotes'>\n                        {this.props.quotes.map(quote => (\n                            <li\n                                key={quote.id}\n                                className={`SingleQuote hvr-float`}\n                                style={{\n                                    backgroundColor: quote.color,\n                                    display:\n                                        this.state.activeItem === quote.id\n                                            ? 'none'\n                                            : 'absolute'\n                                }}\n                                onClick={() => {\n                                    this.props.handleChoice(quote.id);\n                                    this.handleClickItem(quote.id);\n                                }}\n                                ref={this.listRef}\n                            >\n                                <h3 className='quote'>{quote.quote}</h3>\n                                <div className='quote-about'>\n                                    <span className='quote-season'>\n                                        Season: {quote.season}\n                                    </span>\n                                    <span className='quote-episode'>\n                                        Episode: {quote.episode}\n                                    </span>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Quotes;\n","import React, { Component } from 'react';\nimport './Author.css';\n\nclass Author extends Component {\n    authorOrWon = (author, gameWon) => {\n        if (gameWon === false) {\n            return (\n                <p className='PickedAuthor'>\n                    {author.author ? `${author.author} said what!?` : ''}\n                </p>\n            );\n        } else if (gameWon === true) {\n            return (\n                <React.Fragment>\n                    <button\n                        className='newQuotesWin'\n                        onClick={this.props.handleNewQuotesClick}\n                    >\n                        <span className='quotesSpan'>New Quotes</span>\n                    </button>\n                    <p className='PickedAuthorWin'>\n                        <span className='fancy-moses'>Sweet fancy moses</span>,\n                        you won!\n                    </p>\n                </React.Fragment>\n            );\n        }\n    };\n\n    render() {\n        const { author, gameWon } = this.props;\n        return (\n            <div className='Author-wrap'>\n                {this.authorOrWon(author, gameWon)}\n            </div>\n        );\n    }\n}\n\nexport default Author;\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = props => {\n    return (\n        <div className='SpinnerContainer'>\n            <svg\n                className='spinner'\n                width='65px'\n                height='65px'\n                viewBox='0 0 66 66'\n                xmlns='http://www.w3.org/2000/svg'\n            >\n                <circle\n                    className='circle'\n                    fill='none'\n                    strokeWidth='6'\n                    strokeLinecap='round'\n                    cx='33'\n                    cy='33'\n                    r='30'\n                ></circle>\n            </svg>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Quotes from './Quotes';\nimport Author from './Author';\nimport Spinner from './Spinner';\nimport axios from 'axios';\nimport uuid from 'uuid';\nimport './App.css';\n\nclass App extends Component {\n    static defaultProps = {\n        numQuotesToGetHard: 6,\n        numQuotesToGetEasy: 3,\n        colors: [\n            '#EEAF00',\n            '#01A7B7',\n            '#DE4B43',\n            '#FCA080',\n            '#FF7E57',\n            '#3C3642',\n            '#85496F',\n            '#5D9B84'\n        ]\n    };\n    state = {\n        quotes: [],\n        pickedAuthor: {},\n        gameWon: false,\n        mode: 'hard',\n        loading: false\n    };\n\n    async componentDidMount() {\n        if (this.state.quotes.length === 0) this.getQuotes();\n    }\n    async getQuotes() {\n        const randColor = array => {\n            var copy = array.slice(0);\n            return function() {\n                if (copy.length < 1) {\n                    copy = array.slice(0);\n                }\n                var index = Math.floor(Math.random() * copy.length);\n                var item = copy[index];\n                copy.splice(index, 1);\n                return item;\n            };\n        };\n        const color = randColor(this.props.colors);\n        let quotes = [];\n        let filteredQuotes = [];\n        while (filteredQuotes.length < this.props.numQuotesToGetHard) {\n            let res = await axios.get(\n                'https://seinfeld-quotes.herokuapp.com/random'\n            );\n            let bulkQuote = res.data;\n            quotes.push({\n                id: uuid.v4(),\n                quote: bulkQuote.quote,\n                author: bulkQuote.author,\n                episode: bulkQuote.episode,\n                season: bulkQuote.season,\n                color: color()\n            });\n\n            filteredQuotes = quotes.filter((obj, pos, arr) => {\n                return (\n                    arr\n                        .map(mapObj => mapObj['author'])\n                        .indexOf(obj['author']) === pos\n                );\n            });\n            this.setState({ loading: true });\n        }\n\n        this.setState({\n            pickedAuthor: filteredQuotes[0],\n            gameWon: false\n        });\n        let authorIndex = filteredQuotes.indexOf(this.state.pickedAuthor);\n        if (this.state.mode === 'hard') {\n            this.setState({\n                quotes: filteredQuotes.sort(() => Math.random() - 0.5)\n            });\n        } else if (this.state.mode === 'easy') {\n            this.setState({\n                quotes: filteredQuotes\n                    .splice(authorIndex, 2)\n                    .sort(() => Math.random() - 0.5)\n            });\n        }\n        this.setState({ loading: false });\n    }\n\n    handleButtonModes = mode => {\n        if (mode === 'easy') {\n            this.setState({ mode: 'easy' });\n        } else if (mode === 'hard') {\n            this.setState({ mode: 'hard' });\n        }\n\n        if (this.state.mode === 'easy' || this.state.mode === 'hard') {\n            this.setState(this.getQuotes());\n        }\n    };\n\n    handleChoice = id => {\n        const currentGuess = this.state.quotes.find(quote => {\n            return quote.id === id;\n        });\n        if (currentGuess.quote === this.state.pickedAuthor.quote) {\n            this.setState({ gameWon: true });\n        }\n    };\n\n    handleNewQuotesClick = () => {\n        this.setState(this.getQuotes());\n    };\n\n    renderQuotes = () => {\n        if (this.state.loading === true) {\n            return <Spinner />;\n        } else if (this.state.loading === false) {\n            return (\n                <React.Fragment>\n                    <Author\n                        author={this.state.pickedAuthor}\n                        gameWon={this.state.gameWon}\n                        handleNewQuotesClick={this.handleNewQuotesClick}\n                    />\n\n                    <Quotes\n                        quotes={this.state.quotes}\n                        author={this.state.pickedAuthor}\n                        handleChoice={this.handleChoice}\n                        gameWon={this.state.gameWon}\n                        color={this.props.colors}\n                        mode={this.state.mode}\n                    />\n                </React.Fragment>\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className='App'>\n                <Header\n                    title={'The Seinfeld Chronicles'}\n                    subtitle={'a quiz for a show about nothing'}\n                    gameWon={this.state.gameWon}\n                    author={this.state.pickedAuthor}\n                    handleButtonModes={this.handleButtonModes}\n                    handleNewQuotesClick={this.handleNewQuotesClick}\n                />\n                {this.renderQuotes()}\n                <p className='builtBy'>\n                    This is gold,{' '}\n                    <a\n                        href='https://twitter.com/olliepegram'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        Ollie!\n                    </a>{' '}\n                    Gold!\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}